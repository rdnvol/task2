import { getUrlWithVariant, ProductForm } from '@shopify/theme-product-form';import { formatMoney } from '@shopify/theme-currency';class Product {  constructor(elem) {    this.wrapper = $(elem);    this.handle = this.wrapper.data('handle');    this.formElement = this.wrapper.find('[data-product-form]');    this.submitButton = this.wrapper.find('[data-submit-button]');    this.submitButtonText = this.wrapper.find('[data-submit-button]');    this.priceContainer = this.wrapper.find('[data-price-wrapper]');    this.shopifyButtons = this.wrapper.find('[data-shopify="payment-button"]');        this.getProduct()      .then(product => {        this.product =  product;        console.log(this.product);        this.form = new ProductForm(this.formElement[0], this.product, {          onOptionChange: this.onOptionChange.bind(this),        });      })  }    updateVariantUrl(variant) {    if (!variant) return;    const url = getUrlWithVariant(window.location.href, variant.id);    window.history.replaceState({ path: url }, '', url);  }    onOptionChange(event) {    const variant = event.dataset.variant;    this.updateVariantPrice(variant);    this.updateSubmitButton(variant);    this.updateVariantUrl(variant);  }    async getProduct() {    const response = await fetch(`/products/${this.handle}.js`);    return await response.json();  }    updateSubmitButton(variant) {    if (!variant) {      this.submitButton.addClass('disabled').attr('disabled', 'disabled');      this.submitButtonText.text(theme.strings.unavailable);      this.shopifyButtons.addClass('d-none');    } else if(variant.available) {      this.submitButton.removeClass('disabled').removeAttr('disabled');      this.submitButtonText.text(theme.strings.addToCart);      this.shopifyButtons.removeClass('d-none');    } else {      this.submitButtonText.text(theme.strings.soldOut);      this.submitButton.addClass('disabled').attr('disabled', 'disabled');      this.shopifyButtons.addClass('d-none');    }  }    updateVariantPrice(variant) {    this.priceContainer.empty();    if (variant) {      this.priceContainer.append(`<div>${formatMoney(variant.price, theme.moneyFormat)}</div>`);      if (variant.compare_at_price > variant.price) {        this.priceContainer.append(`<del>${formatMoney(variant.compare_at_price, theme.moneyFormat)}</del>`);      }    }      }}const productInit = {  init(elem) {    if ($(elem).length > 0) {      window.product = new Product(elem);    }  }};export default productInit;